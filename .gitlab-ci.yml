stages:
  - build
  # - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

services:
  - docker:dind

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build_frontend:
  stage: build
  image: docker:latest
  script:
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE/frontend:latest -f frontend/Dockerfile --build-arg VITE_API_URL=http://backend:8000 .
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend:latest

build_backend:
  stage: build
  image: docker:latest
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE/backend:latest -f backend/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/backend:latest

# test_frontend:
#   stage: test
#   image: node:22.13-alpine3.20
#   script:
#     - cd frontend
#     - yarn install
#     - yarn test

# test_backend:
#   stage: test
#   image: python:3.9
#   script:
#     - cd backend
#     - pip install -r requirements.txt
#     - python -m pytest

deploy:
  stage: deploy
  image: docker:latest
  script:
    - docker pull $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/frontend:production
    - docker tag $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/backend:production
    - docker push $CI_REGISTRY_IMAGE/frontend:production
    - docker push $CI_REGISTRY_IMAGE/backend:production
    # Ajoutez ici les commandes pour déployer sur votre environnement de production
  only:
    - devlop  # Ce job ne s'exécute que sur la branche develop